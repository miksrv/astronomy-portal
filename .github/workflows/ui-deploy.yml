name: UI Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'client/**/*'

jobs:
  ui-ftp-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18
          cache: 'yarn'
          cache-dependency-path: 'client/yarn.lock'

      - name: Cache node modules
        uses: actions/cache@v3
        id: cache-npm
        with:
          path: |
            client/node_modules
            ~/.npm
            ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-modules-${{ hashFiles('client/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-modules-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Install dependencies
        working-directory: client
        run: yarn install

      - name: Cache UI build
        uses: actions/cache@v3
        id: cache-build
        with:
          path: client/out
          key: ${{ runner.os }}-build-${{ hashFiles('client/**/*.ts', 'client/**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-build.outputs.cache-hit != 'true' }}
        name: Configure Client
        run: |
          echo "NEXT_PUBLIC_API_HOST = '${{ secrets.NEXT_PUBLIC_API_HOST }}'
          NEXT_PUBLIC_METRIKA = ' '" > .env
        working-directory: client

      - if: ${{ steps.cache-build.outputs.cache-hit != 'true' }}
        name: Build UI
        run: |
          export dateNow=$(date +"%d.%m.%Y")
          echo "export const update = '$dateNow'" > update.ts
          yarn build
        working-directory: client

      - name: Export UI
        working-directory: client
        run: yarn export

      - name: Install LFTP
        run: sudo apt install lftp

      - name: Configure LFTP
        run: mkdir ~/.lftp && echo "set ssl:verify-certificate false;" >> ~/.lftp/rc

      - name: Load Secrets
        run: echo "machine ${{ secrets.FTP_HOSTNAME }} login ${{ secrets.FTP_USERNAME }} password ${{ secrets.FTP_PASSWORD }}" > ~/.netrc

      - name: Upload Folder
        run: lftp -e "mirror --parallel=100 -R client/out/ /" ${{ secrets.FTP_HOSTNAME }}
